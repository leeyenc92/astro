---
interface TextChild {
  type: 'text';
  text?: string;
  bold?: boolean;
  italic?: boolean;
  underline?: boolean;
  strikethrough?: boolean;
  code?: boolean;
}

interface LinkChild {
  type: 'link';
  url: string;
  children: RichTextChild[];
}

interface ListItemChild {
  type: 'list-item';
  children: RichTextChild[];
}

type RichTextChild = TextChild | LinkChild | ListItemChild;

interface ParagraphBlock {
  type: 'paragraph';
  children: RichTextChild[];
}

interface HeadingBlock {
  type: 'heading';
  children: RichTextChild[];
}

interface ListBlock {
  type: 'list';
  format: 'ordered' | 'unordered';
  children: ListItemChild[];
}

type Block = ParagraphBlock | HeadingBlock | ListBlock;

const { blocks } = Astro.props as { blocks: Block[] };

function extractText(children: RichTextChild[]): string {
  if (!children) return "";
  return children.map((child) => {
    if (child.type === "text") {
      return child.text || "";
    }
    if (child.type === "link" && child.children) {
      return extractText(child.children);
    }
    return "";
  }).join("");
}
---
{blocks.map((block) => {
  const renderChildren = (children: RichTextChild[]) => {
    return children.map((child) => {
      if (!child) return null;

      if (child.type === 'text') {
        if (!child.text) return null;

        let element = child.text;

        if (child.code) {
          element = <code class="bg-gray-100 text-gray-800 font-mono px-3 py-1 rounded">{element}</code>;
        }
        if (child.bold) {
          element = <strong>{element}</strong>;
        }
        if (child.italic) {
          element = <em>{element}</em>;
        }
        if (child.underline) {
          element = <u>{element}</u>;
        }
        if (child.strikethrough) {
          element = <s>{element}</s>;
        }

        return <span>{element}</span>;
      }

      if (child.type === 'link') {
        return (
          <a href={child.url} target="_blank" rel="noopener noreferrer" class="text-primary underline">
            {renderChildren(child.children)}
          </a>
        );
      }

      if (child.type === 'list-item') {
        return (
          <li class="mb-1"> {/* add small gap between list items */}
            {renderChildren(child.children)}
          </li>
        );
      }

      return null;
    });
  };

  if (block.type === "paragraph") {
    const content = extractText(block.children).trim();
    return (
      <p class="mb-3">
        {content !== "" ? renderChildren(block.children) : "\u00A0"}
      </p>
    );
  }

  if (block.type === "heading") {
    return (
      <h2 class="mt-6 mb-3 text-xl font-bold">
        {renderChildren(block.children)}
      </h2>
    );
  }

  if (block.type === "list") {
    const ListTag = block.format === "ordered" ? "ol" : "ul";
    const listClass = block.format === "ordered" ? "list-decimal" : "list-disc";

    return (
      <ListTag class={`list-inside ml-5 ${listClass} mb-4`}>
        {block.children.map((item) => renderChildren([item]))}
      </ListTag>
    );
  }

  return null;
})}
