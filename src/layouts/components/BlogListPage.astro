---
import fetchApi from "@/lib/utils/fetchApi";
import type { Post, StrapiResponse, PostListItem } from "@/types";
import LayoutWrapper from "@/components/LayoutWrapper.astro";
import CallToAction from "@/components/sections/CallToAction.astro";
import parseTomlToJson from "@/lib/utils/parseTomlToJson";
import resolveImageUrl from "@/lib/utils/resolveImageUrl";
import PageHeader from "@/components/widgets/PageHeader.astro";

const config = parseTomlToJson("./src/config/config.toml");

const { currentPage } = Astro.props;

let blogPosts:PostListItem[] = [];
let totalPages = 1;

try {
  const pageSize = config.settings.pagination || 6;
  const page = currentPage || 1;

  const { data, meta } = await fetchApi<StrapiResponse<Post[]>>({
    endpoint: "posts",
    query: {
      "populate[coverImage][populate]": true,
      "pagination[page]": String(page),
      "pagination[pageSize]": String(pageSize),
      "populate": "categories",
      "sort": "publishedAt:desc",
    },
  });

  blogPosts = data.map((post) => ({
    data: {
      title: post.title,
      date: new Date(post.publishedAt).toLocaleDateString(Astro.currentLocale),
      image: resolveImageUrl(post.coverImage),
      categories: post.categories?.map((cat) => cat.name) || [],
      content: post.content,
      author: post.author?.name || "",
    },
    slug: post.slug,
    id: post.id,
  }));

  totalPages = meta?.pagination?.pageCount ?? 1;
} catch (error) {
  console.error("Blog fetch error:", error);
  blogPosts = [];
}
---

<PageHeader />
<LayoutWrapper
  pageType="list"
  sidebar={{ enable: true, sticky: true, position: "right" }}
  contentList={{
    items :blogPosts,
    options: { content: "blog", layout: "grid", gap: "gap-8", columns: 2 },
    pagination: { enable: true, currentPage, totalPages },
  }}
/>
<CallToAction />
