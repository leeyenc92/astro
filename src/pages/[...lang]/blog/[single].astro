---
import CallToAction from "@/components/sections/CallToAction.astro";
import Base from "@/layouts/Base.astro";
import LayoutWrapper from "@/components/LayoutWrapper.astro";
import resolveImageUrl from "@/lib/utils/resolveImageUrl";
import fetchApi from "@/lib/utils/fetchApi";
import type { Post } from "@/types";

export async function getStaticPaths() {
  const posts = await fetchApi<Post[]>({ endpoint: 'posts', wrappedByKey: 'data' });
  return posts.map((post) => ({
    params: { single: post.slug },
  }));
}

const { single } = Astro.params as { single: string };

const postData = await fetchApi<Post>({
  endpoint: `posts`,
  query: {
    'filters[slug][$eq]': single,
    'populate[coverImage][populate]': true,
    'populate[author][populate]': 'avatar',
    'populate[categories][populate]': true,
  },
  wrappedByKey: 'data',
  wrappedByList: true,
});

if (!postData) {
  throw new Error(`Post not found for slug: ${single}`);
}

const post = {
  id: postData.id,
  title: postData.title,
  slug: postData.slug,
  date: new Date(postData.publishedAt).toLocaleDateString('en-US', { year: 'numeric', month: 'long', day: 'numeric' }),
  author: postData.author?.name,
  authorObject: {
    title: postData.author?.name || '',
    image: postData.author?.avatar?.url ? resolveImageUrl(postData.author.avatar) : '',
    role: postData.author?.role || '',
  },
  categories: postData.categories?.map((cat: { name: string }) => cat.name) || [],
  excerpt: postData.excerpt,
  image: resolveImageUrl(postData.coverImage),
  content: postData.content || null,
};

---

<Base {...post}>
  <LayoutWrapper
    sidebar={{ enable: false, sticky: true }}
    content={post}
    boxShadow={false}
  />
  <CallToAction />
</Base>
